Description: Udagram - Infrastructure as Code Project

Parameters:
  # Add your parameters here
  ExerciseName:
    Type: String
    Description: Tag name for our resources
    Default: project-web-app

  DesiredEC2Capacity:
    Type: String
    Description: Desired EC2 capacity
    Default: 4

  MyBucketName:
    Type: String
    Description: My Bucket Name
    Default: project2-webapp-dev-rahul-bucket

Resources:
  # EC 2 server as a bastion host
  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: KeyPair
      ImageId: ami-04b70fa74e45c3917
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub "${ExerciseName}-public-subnet1"
      # this helps us identify which EC2 instance is the Bastion Host
      Tags:
        - Key: Name
          Value: "Bastion Host"

  # The Security Group of the Bastion Host
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public SSH access to the bastion host
      VpcId:
        Fn::ImportValue:
          !Sub "${ExerciseName}-vpc-id"
      SecurityGroupIngress:
      # Allow SSH access to the bastion host
      # Ideally, set the ip address of your local computer. In this case, though,
      # let's just allow any ip address.
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  # Add your resources here
  # We include a portion of the LaunchTemplate resource so you can use the UserData.
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub "${ExerciseName}-web-servers"
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start

            WEB_DIR="/var/www/html"

            cat <<EOF > index.html
            <!DOCTYPE html>
            <head>
              <h1> it works!! </h1>
            </head>
            <boday
              <h1> It works ! Udagram, Udacity!</h1>
              <p> This website is hosted on nginx!!<p>
            </body>
            </html>
            EOF

            sudo rm -r $WEB_DIR/index.*
            sudo cp index.html $WEB_DIR

            sudo systemctl reload nginx

        ImageId: ami-04b70fa74e45c3917
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        InstanceType: t2.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile   

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to our EC2 instances
      VpcId:
        Fn::ImportValue:
          !Sub "${ExerciseName}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref BastionSecurityGroup    

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to our Load Balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${ExerciseName}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${ExerciseName}-public-subnet1"
        - Fn::ImportValue: !Sub "${ExerciseName}-public-subnet2"
      SecurityGroups:
        - Ref: LBSecurityGroup             

  WebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ExerciseName}-web-servers"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:GetObject'
              Resource:
                - !Sub "arn:aws:s3:::${MyBucketName}/*"

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebAppInstanceRole       

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${ExerciseName}-private-subnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: !Ref DesiredEC2Capacity
      MaxSize: '6'
      TargetGroupARNs:
       - Ref: WebAppTargetGroup

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${ExerciseName}-vpc-id"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP    

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1  

  # S3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub "${MyBucketName}"
  #     AccessControl: PublicReadWrite
  #     VersioningConfiguration:
  #       Status: Enabled
  #     LifecycleConfiguration:
  #       Rules:
  #         - Status: "Enabled"
  #           NoncurrentVersionExpirationInDays: 10
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: false
  #       IgnorePublicAcls: false
  #       BlockPublicPolicy: false
  #       RestrictPublicBuckets: false         

Outputs:
  LoadBalancerName:
    Description: Name of the load balancer
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ]]
    Export:
      Name:  'LoadBalancerName'